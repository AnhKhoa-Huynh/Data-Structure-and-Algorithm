BUBBLE SORT
We implement the algorithm with two loops.

- The first loop iterates as **long as the list is unsorted,** and we assume it’s unsorted to start.
- Within this loop, another iteration moves through the list. For each pairing, the algorithm asks:
    - In comparison, is the first element larger than the second element?
    - If it is, we swap the position of the elements. The larger element is now at a greater index than the smaller element.
- When a swap is made, we know the list is still unsorted. The outer loop will run again when the inner loop concludes.
- The process repeats until the largest element makes its way to the last index of the list. The outer loop runs until no swaps are made within the inner loop.

- According to the sorting criteria, the algorithm swaps elements to shift elements towards the beginning or end of the list.
- By default, a list is sorted if for any element `e` and position `1` through `N`:

`e1` <= `e2` <= `e3` … `eN`, where `N` is the number of elements in the list.

MERGE SORT 
- A merge sort was the strategy that breaks the list-to-be-sorted into smaller parts, sometimes called a *divide-and-conquer algorithm*.
- In a divide-and-conquer algorithm, the data is continually broken down into smaller elements until sorting them becomes really simple.

- When splitting the data, we divide the input to our sort in half. We then recursively call the sort on each of those halves, which cuts the halves into quarters. This process continues until all of the lists contain only a single element.
- Then we begin merging.
- When merging two single-element lists, we check if the first element is smaller or larger than the other. Then we return the two-element list with the smaller element followed by the larger element.

- Let’s call the two lists `left` and `right`. Both `left` and `right` are already sorted. We want to combine them (to *merge* them) into a larger sorted list, let’s call it `both`. To accomplish this we’ll need to iterate through both with two indices, `left_index` and `right_index`.
- At first `left_index` and `right_index` both point to the start of their respective lists. `left_index` points to the smallest element of `left` (its first element) and `right_index` points to the smallest element of `right`.
- Compare the elements at `left_index` and `right_index`. The smaller of these two elements should be the first element of `both` because it’s the smallest of both! It’s the smallest of the two smallest values.
- Let’s say that smallest value was in `left`. We continue by incrementing `left_index` to point to the next-smallest value in `left`. Then we compare the 2nd smallest value in `left` against the smallest value of `right`. Whichever is smaller of these two is now the 2nd smallest value of `both`.
- Once one list is exhausted, say every element from `left` has been added to the result, then we know that all the elements of the other list, `right`, should go at the end of the resulting list (they’re larger than every element we’ve added so far).

QUICKSORT
Quicksort uses a divide and conquer strategy, breaking the problem into smaller sub-problems until the solution is so clear there’s nothing to solve.
- The problem: many values in the array which are out of order.
- The solution: break the array into sub-arrays containing **at most** one element. One element is sorted by default!
- We choose a single *pivot* element from the list. Every other element is compared with the pivot, which *partitions* the array into three groups.
    - A sub-array of elements **smaller than** the pivot.
    - The pivot itself.
    - A sub-array of elements **greater than** the pivot.
